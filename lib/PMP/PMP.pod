=head1 NAME

PMP - Poor Man's Pipeline; programmatic pipeline control

=head1 SYNOPSIS

The best synposis is found in the tutorial:
http://wiki.bic.mni.mcgill.ca/index.php/PoorMansPipeline

=head1 DESCRIPTION

PMP stands for "Poor Man's Pipeline" and is designed as a counterpart
to RPPL. The main goals of PMP are:

=over 4

=item *

Execution of a set of commands describing a pipeline

=item *

Tracking of dependencies between the different commands

=item *

Parallel execution mode by using one of two batch queueing system

=item *

Drop in replacement of parallel or sequential modes.

=item *

Generation of dependency graphs for easier debugging.

=item *

Full programmatic control over the pipeline. I.e. it is designed as a
series of perl classes rather than a separate language. The key
advantage to the approach that PMP takes is that it makes it possible
for generic pipelines to be written since argument parsing and all
control structures of Perl are available to the user.

=item *

Easily customizeable through the use of inheritance. Use a pipeline
that calls on a batch queueing system or not - by changing one line
of code.

=back

The main features currently not present which might be added in the
near future are:

=over 4

=item *

Use of a database to track dependencies and pipeline status. Using a
database rather than the filesystem is a blessing in that it can
allow for faster execution times since there is much less file
access, and a curse in that it makes an application much less portable.

=back

=head1 COMPONENTS

PMP currently consists of four different classes:

=over 4

=item * PMP::PMP

The main class which is used to configure a pipeline. A pipeline is,
for the purposes of PMP, defined as a the set of commands and their
dependencies for a single subject.

=item * PMP::pbs

A subclass of PMP in which the command execution uses the PBS batch
queueing system rather than the MNI::Spawn interface. Otherwise
should be entirely exchangeable with PMP::PMP.

=item * PMP::sge

A subclass of PMP in which the command execution uses the SGE (Sun
Grid Engine) batch queueing system. Otherwise should be entirely
exchangeable with PMP::PMP.

=item * PMP::Array

Designed to deal with a set of pipelines. Most pipeline runs will
consist of multiple subjects executing the same set of commands -
PMParray is designed to make that easy.

=back

=head1 OVERVIEW

The usual way of setting up a PMP pipeline is the following:

Import the necessary components through the use statement, e.g.:

    use PMP::PMP;
    use PMP::pbs;
    use PMP::sge;
    use PMP::Array;

The pipearray is also declared at this early point:

    my $pipes = PMP::Array->new();

Then comes any argument processing that your application might have
to deal with as well as setting up some global variables that will
remain unchanged for each pipeline. This is followed by the
definitions of each individual pipeline, usually placed inside a
foreach loop which processes each subject. Inside this loop the
pipeline is initialised like so:

    my $pipeline = PMP::PMP->new(); # sequential version
    my $pipeline = PMP::pbs->new(); # parallel version using PBS
    my $pipeline = PMP::sge->new(); # parallel version using SGE

Then certain globals for that pipeline are set, such as

    $pipeline->name("some-name");
    $pipeline->statusDir("/some/directory");

This makes a good place also for defining variables that change for
each subject, such as input and output filenames.

This is followed by defining all the stages through the addStage
method, an example of which is:

    $pipeline->addStage(
	{ name => "total",
      label => "this does something interesting",
	  inputs => [$filename],
	  outputs => [$talTransform],
	  args => ["mritotal", $filename, $talTransform] });

After all the stages have been defined some further initialisation
commands can be run:

    # restart all stages that failed in a previous run
    $pipeline->resetFailures();

Then the pipeline can be added to the Pipearray:

    $pipes->addPipe($pipeline);

The foreach loop can then be closed and the pipeline itself run:

    # loop until all pipes are done
    $pipes->run();

=head1 PUBLIC METHODS

=head2 new

Initialises a pipeline. Has to be the first method called. Takes no arguments.

=head2 addStage

Adds a stage definition to the pipeline. Takes a hash as an
argument. The hash has the following components:

=over 4

=item * name

The name of that particular stage. The name is what will be used to
address this stage for later usage (such as dependency tracking).

=item * label

A description of this stage. Entirely optional, and is only used when
generating dependency graphs. Some formatting codes are allowed,
especially for newlines: use \\n.

=item * inputs

An array of the input filenames. The only use this array is currently
put to is establishing pipeline status based on file existence and
dates.

=item * outputs

An array of output filenames. Only currently used for establishing
pipeline status based on file existence and dates.

=item * args

An array containing the actual command that will be run when this
stage is executed. The first element is the program name, the
following the options and filenames in the same order as that program
needs them.

=item * prereqs

An optional array of stage names upon which this current stage
depends. If this option is not passed to addStage then it is assumed
that this stage has no prerequisites.

=item * shellquote

An optional boolean variable (0 or 1) which specifies whether
shellquoting should be used in this stage. Only makes a difference for
PMP::pbs and PMP::sge at this moment. By default shell-quoting is
turned off; this flag has to be set for each stage which should use
shell-quoting.

=back

An example of adding a stage would be:

    $pipeline->addStage(
	{ name => "cls",
      label => "does something else that is interesting",
	  inputs => [$final],
	  outputs => [$cls],
	  args => ["classify_clean", "-clobber", "-clean_tags", 
	           $final, $cls],
	  prereqs => ["final"] });
 
=head2 statusDir

Gets or sets the directory in which status files are placed. Status
files are used to keep track of each stage's completion status as
well as whatever messages the running of that stage produced. The
following files can thus be created for each stage during the
processing of a pipeline:

=over 4

=item * statusDir/pipelineName.stageName.running

An empty file that is created while the stage is running or has been
submitted to the batch system. This file is removed once the stage
completes or crashes.

=item * statusDir/pipelineName.stageName.finished

An empty file that is created when a stage has completed successfully.

=item * statusDir/pipelineName.stageName.failed

An empty file that is created when a stage has existed with any value
other than zero.

=item * statusDir/pipelineName.stageName.log

A file that is created once a stage has finished and which holds the
messages printed to stdout and stderr during the execution of a job.

=back

=head2 name

Gets or sets the name of the pipeline (if an argument is supplied
than it sets the name to that argument).

=head2 debug

Gets or sets whether debug messages will be printed. A value of 0
turns debugging off, anything else turns it on.

=head2 printUnfinished

Prints the unfinished stages. If no arguments are supplied it prints
them tersely, if an argument is supplied it gives more detail about
each stage that is still unfinished.

=head2 statusFromFiles

Sets the status of each stage based on its inputs and outputs (as
specified in addStage). A stage will be considered to have finished
if both the outputs and inputs exist and if the outputs are newer
than the inputs.

=head2 updateStatus

Updates the status of each stage based on the status files. Should be
called after all the stages have been added and before the pipeline
is executed.

=head2 registerPrograms

Registers all the programs used in the pipeline. The assumption is
that the first element of the args array that is passed to addStage
contains the program name. A benefit of registering the programs is
that PMP will die if any of the programs cannot be found on the
environment.

=head2 run

Run one iteration of the pipeline. Returns a value of 0 when the
pipeline has no more stages that can be executed.

=head2 resetStage

Takes a stage name as an argument and resets that stage's status so
that it becomes runnable again.

=head2 resetFailures

Resets all stages that have failed so that they can be run again.

=head2 resetFromStage

Takes a stage name as an argument and resets all stages from that
stage onwards (including that stage itself).

=head2 resetAll

Resets all stages in the pipeline.

=head2 resetRunning

Resets all stages thought to be running.

=head2 createDotGraph

Takes an filename as an input - a graph description will be written to
that file. One can use dot (a tool that is part of graphviz) to
generate a graphical representation of the dependecies like so: dot
-Tps filename -o output.ps.

=head2 createFilenameDotGraph

Takes a filename as an argument as well as optional third argument
representing a substring to be removed from the filenames. It then
creates a dot file for generating a graph of the filename
dependenencies.

=head2 printStatusReportHeader 

Takes a filehandle reference as an argument, and prints a CSV separated
header containing all the stage names to that file.

=head2 printStatusReport

Takes a filehandle reference as an argument, and prints the status for
each stage in CSV format to that filehandle.

=head2 printStage

Takes a stage name as an argument and prints information about that
stage.

=head2 printStages

Prints all stages in the pipeline.

=head2 getPipelineStatus

Gets the pipeline's status, returning one of four possible strings:

=over 4

=item * "not started" This pipeline has not yet been started

=item * running This pipeline is running; also returns a list of the
stages that are currently running.

=item * failed This pipeline has failed; also returns a list of the
stages that have failed.

=item * finished This pipeline has finished.

=back

=head2 subsetToStage

Takes a stage name as an argument, and creates a subset of stages
running from the beginning of the pipeline up to that stage.

=head1 SEMI-PRIVATE METHODS

In the good old perl tradition PMP has no private methods. The
following methods listed here, however, are not really meant for the
calling program. Most should not do any harm, but there is no
guarantee. In other words, use at your own risk.

=head2 stageStatusFromFiles

Takes a stage as an argument and sets the status of that stage to
finished if it has all inputs and outputs and the outputs are newer
than the inputs.

=head2 printDependencyTree

Prints the dependency tree. Sort of. The issue is that the dependency
is both downwards as well as rightwards. In other words, there is a
guarantee that when a stage appears in this tree that it does not
depend on any stages to its right or below it. A bit hard to read,
which is why this is still considered a semi-private method.

=head2 sortStages

Sorts the stages based on their dependencies. Gets called
automatically when needed, so has no real place in user space. The
order only guarantees that a stage does not depend on any of the
following stages.

=head2 isStageFinished

Takes a stage name as an argument and returns true if the stage has
finished. In PMP it checks first whether the status flag has been set
to finished, and if not whether the finished file exists for that
stage in the statusDir. Would have to be overwritten in a subclass
that uses a database to track the pipelines status.

=head2 isStageRunning

Same as above but checks whether the stage is running.

=head2 isStageFailed

Same as above but checks whether the stage has failed.

=head2 updateStageStatus

Takes a stage name as the argument and updates its status. Called
automatically when needed and therefore has no place in userland.

=head2 execStage

Takes a stage name as the argument and executes that stage. This
method is overridden in the PMPpbs subclass. In PMP it just uses the
MNI::Spawn interface. 

=head2 getStatusBase

Takes a stage name as an argument and returns the base for its status files.

=head2 getRunningFile

Takes a stage name as an argument and returns the running filename for
that stage.

=head2 getFailedFile

Takes a stage name as an argument and returns the failed filename for
that stage.

=head2 getFinishedFile

Takes a stage name as an argument and returns the finished filename
for that stage.

=head2 getLogFile

Takes a stage name as an argument and returns the log filename for
that stage.

=head2 declareStageRunning

Takes a stage name as an argument and declares that stage to be
running. Touches the appropriate filename. 

=head2 declareStageFailed

Same as above but for failure.

=head2 declareStageFinished

Same as above but for successful completion.

