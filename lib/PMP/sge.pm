###
# Package PMP::sge - Poor Man's Pipeline using the SGE batch system
#
# Very similar to the PBS module

package PMP::sge;
use PMP::PMP;
use MNI::MiscUtilities qw(shellquote);

@ISA = ("PMP::PMP");

# set the batch queue
sub setQueue {
    my $self = shift;
    my $Q = shift;

#    if (! ( $Q =~ /short/ || $Q =~ /medium/ || $Q =~ /long/ ) ) {
#	die "ERROR: illegal Q $Q - has to be either short, medium, or long\n";
#    }
    $self->{sgeQueue} = $Q;
}

# overwrite the execStage method and use SGE qsub command to submit jobs
sub execStage {
    my $self = shift;
    my $stageName = shift;

    # get the pipe queue - use all.q as default
    my $Q = "all.q";
    if (exists $self->{sgeQueue}) {
	$Q = $self->{sgeQueue};
    }

    # set the job name
    my $jobName = "$self->{NAME}-${stageName}";
    $jobName =~ s/;/_/g;
    $jobName =~ s/,/_/g;
    $jobName =~ s/\s/_/g;
    $jobName = "N$jobName" if ($jobName !~ /^[a-zA-Z]/); 

    # run the stage in question
    $self->declareStageRunning($stageName);
    my $runningFile = $self->getRunningFile($stageName);

    # now set up the batch job
    my $logFile = $self->getLogFile($stageName);
    my $finishedFile = $self->getFinishedFile($stageName);
    my $failedFile = $self->getFailedFile($stageName);
    my $sgeSub = <<END;

#!/bin/sh
# generated by PMP::sge
#\$ -o $logFile -j y
#\$ -N $jobName
#\$ -q $Q

cd \$SGE_O_WORKDIR
END

# now add the environment to the submission command
    foreach my $env ( keys %ENV ) {
	$sgeSub .= "export ${env}=\"$ENV{$env}\"\n";
    }

    # define the command string, shellquoting if so desired
    my $cmdstring = "@{ $self->{STAGES}{$stageName}{'args'} } ";
    my $echostring = shellquote(@{ $self->{STAGES}{$stageName}{'args'} });

    $sgeSub .= <<END;


echo "Working directory: " `pwd`
echo $echostring
$cmdstring
if [ "\$?" == "0" ] 
then 
  touch $finishedFile
else 
  touch $failedFile
fi

rm -f $runningFile

END

#open PIPE, ">/data/kidnet/kidnet1/tempdump/$jobName.sh";
#print PIPE $sgeSub;
#close PIPE;

    open PIPE, "|qsub -S /bin/sh" 
    or die "ERROR: could not open pipe to qsub: $!\n";
    print PIPE $sgeSub;
    if (! close PIPE ) {
        warn "ERROR: could not close qsub pipe $self->{NAME}: $!\n";
        warn "Continuing for now, but this pipe might have gone bad.\n";
    }

}

1;
	
