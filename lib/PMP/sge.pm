###
# Package PMP::sge - Poor Man's Pipeline using the SGE batch system
#
# Very similar to the PBS module

package PMP::sge;
use PMP::PMP;
use MNI::MiscUtilities qw(shellquote);

@ISA = ("PMP::PMP");

# overwrite the execStage method and use SGE qsub command to submit jobs
sub execStage {
    my $self = shift;
    my $stageName = shift;

    # set the job name
    my $jobName = "$self->{NAME}-${stageName}";
    
    # run the stage in question
    $self->declareStageRunning($stageName);
    my $runningFile = $self->getRunningFile($stageName);

    # now set up the batch job
    my $logFile = $self->getLogFile($stageName);
    my $finishedFile = $self->getFinishedFile($stageName);
    my $failedFile = $self->getFailedFile($stageName);
    my $sgeSub = <<END;

#!/bin/sh
# generated by PMP::sge
#\$ -o $logFile -j y
#\$ -N $jobName

cd \$SGE_O_WORKDIR
END

# now add the environment to the submission command
    foreach my $env ( keys %ENV ) {
	$sgeSub .= "export ${env}=\"$ENV{$env}\"\n";
    }

    # define the command string, shellquoting if so desired
    my $cmdstring = "@{ $self->{STAGES}{$stageName}{'args'} } ";
    $cmdstring = shellquote(@{ $self->{STAGES}{$stageName}{'args'} }) 
	if ($self->{STAGES}{$stageName}{'shellquote'});

    $sgeSub .= <<END;
echo "Working directory: " `pwd`
echo \'$cmdstring\'
$cmdstring
if [ "\$?" == "0" ] 
then 
  touch $finishedFile
else 
  touch $failedFile
fi

rm $runningFile

END

    open PIPE, "|qsub -S /bin/sh" 
    or die "ERROR: could not open pipe to qsub: $!\n";
    print PIPE $sgeSub;
    if (! close PIPE ) {
        warn "ERROR: could not close qsub pipe $self->{NAME}: $!\n";
        warn "Continuing for now, but this pipe might have gone bad.\n";
    }

}

1;
	
