=head1 NAME

PMParray - convenience functions for controlling multiple PMP pipes.

=head1 SYNOPSIS

See the synopsis in the PMP documentation for an illustration of how
to use PMParray.

=head1 DESCRIPTION

PMParray contains a series of convenience functions for dealing with
multiple pipelines. The definition of a pipeline in the PMP context
relates to all the stages for an individual subject. In most cases,
however, a program will execute all stages for multiple
subjects. This is where PMParray comes in, as it provides facilities
for doing just that.

=head1 OVERVIEW

The basic usage of PMParray is the following: PMParray is initialized
with a call to PMParray->new(). Then the individual PMP pipelines are
created. Once each pipeline is created it is added to PMParray with
the PMParray->addPipe method. Then PMParray is used to call the same
method on all its component pipelines - such as running them all to
completion.

=head1 METHODS

=head2 new

Initialises the pipeline - has to be the first method called.

=head2 maxQueued

Set the maximum number of running jobs in queue. 

=head2 setGranularity

Set the granularity level for the scheduling of the stages. An argument 
value of 0 will submit each stage to the queue whereas a value of 1 will
lump together all stages for a given subject and submit them in one job 
to the queue (one queue submission per subject).

=head2 addPipe

Takes a PMP object as its argument and adds it to the PMParray.

=head2 run

Runs all the pipelines that have been added until nothing is left to
be done in any of them.

=head2 updateFromFiles

Sets the status of all stages in all pipelines based on their inputs
and outputs. In other words, calls the PMP method statusFromFiles on
all pipelines.

=head2 printUnfinished

Prints the unfinished stages for each pipeline.

=head2 resetFromStage

Takes a stage name as an argument, and resets all stages from that
one onwards in each pipeline (uses a method of the same name in PMP).

=head2 resetAll

Resets all stages in all pipelines.

=head2 printStages

Prints the stages of the first pipeline in the array (i.e. it assumes
that this information will be the same for all pipelines).

=head2 createDotGraph

Takes a filename as an argument, and creates a dot graph description
therein. One can then use the command line program dot to actually
generate the graph.

=head2 createFilenameDotGraph

Takes a filename as an argument, and a substring as an optional second
argument. Then creates a dot graph description in the filename; this
graph contains each stage along with its output files. The substring,
if provided, is removed from each filename (so the best use of it is
to provide the base directory of all the files). Uses the first
pipeline in the array to generate this graph.

=head2 printPipelineStatus

Takes a filename as an optional argument. If provided, prints the
status of all pipelines in the Array to that file, otherwise to
stout.

=head2 registerPrograms

Registers the programs of the first pipeline in the array, exiting if
any program cannot be found in the current path.

=head2 subsetToStage

Takes a stagename as an argument, and subsets each pipeline to run
from the first stage until the stagename provided as the argument.

=head2 printStatusReport

Takes a filename as an argument and prints a CSV separated status
report therein.

=head2 sleepTime

Gets or sets the number of seconds to sleep between pipeline
executions.
